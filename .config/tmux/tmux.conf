# I'm making my own tmux config.
# Taking from my oh-my-tmux config

# -- general -------------------------------------------------------------------

set -g default-terminal "tmux-256color"

setw -g xterm-keys on
set -s escape-time 10                     # faster command sequences
set -sg repeat-time 600                   # increase repeat timeout
set -s focus-events on
set -g mouse on                           # mouse mode

set-option -g allow-rename off            # prevents automatic rename of windows

# Set Tmux prefix to Ctrl-Space
unbind C-b
if-shell '[[ $(hostname) =~ \.ufhpc$ ]]' {
  set-option -g prefix C-a                # Settings for HPG
  bind C-a send-prefix
  set -g prefix2 C-a
  bind C-a send-prefix -2

  set -g status-position bottom
} {
  set-option -g prefix C-Space            # Settings for non-HPG
  bind C-Space send-prefix
  set -g prefix2 C-Space
  bind C-Space send-prefix -2

  set -g status-position top

  # Settings an additional window movement for local machine only
  bind -r C-h previous-window # select previous windows
  bind -r C-l next-window     # select next window
}

set -q -g status-utf8 on                  # expect UTF-8 (tmux < 2.2)
setw -q -g utf8 on

set -g history-limit 10000

# reload configuration

# bind r run '"$TMUX_PROGRAM" ${TMUX_SOCKET:+-S "$TMUX_SOCKET"} source "$TMUX_CONF"' \; display "#{TMUX_CONF} sourced"

bind r source-file ~/.config/tmux/tmux.conf \; display "Reloaded config!"


# -- display -------------------------------------------------------------------

set -g base-index 1           # start windows numbering at 1
setw -g pane-base-index 1     # make pane numbering consistent with windows

setw -g automatic-rename on   # rename window to reflect current program
set -g renumber-windows on    # renumber windows when a window is closed

set -g set-titles on          # set terminal title

set -g display-panes-time 800 # slightly longer pane indicators display time
set -g display-time 1000      # slightly longer status messages display time

set -g status-interval 10     # redraw status line every 10 seconds

# clear both screen and history
bind -n C-l send-keys C-l \; run 'sleep 0.2' \; clear-history

# activity
set -g monitor-activity on
set -g visual-activity off


# -- navigation ----------------------------------------------------------------

# create session
bind C-c new-session

# find session
bind C-f command-prompt -p find-session 'switch-client -t %%'

# session navigation
bind BTab switch-client -l  # move to last session

# split current window horizontally; I don't really use these
bind - split-window -v
# split current window vertically
bind _ split-window -h

# make splits and new windows start in the same working directory
bind '"' split-window -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"

# Windows
unbind n
unbind p
bind n next-window
bind p previous-window
unbind Tab
bind Space last-window

# Shift Alt vim keys to switch windows
bind -n M-H previous-window
bind -n M-L next-window

# pane navigation
bind -r h select-pane -L  # move left
bind -r j select-pane -D  # move down
bind -r k select-pane -U  # move up
bind -r l select-pane -R  # move right
# bind > swap-pane -D       # swap current pane with the next one
# bind < swap-pane -U       # swap current pane with the previous one

# Swap windows
bind > swap-window -t +1\; select-window -t +1       # swap current pane with the next one
bind < swap-window -t -1\; select-window -t -1       # swap current pane with the previous one

# maximize current pane;    what is this... It looked like it tweaked out. Does not seem better than <prefix>z
bind + run "cut -c3- '#{TMUX_CONF}' | sh -s _maximize_pane '#{session_name}' '#D'"

# pane resizing
bind -r H resize-pane -L 2
bind -r J resize-pane -D 2
bind -r K resize-pane -U 2
bind -r L resize-pane -R 2

# window navigation
# unbind n
# unbind p
# bind -r C-h previous-window # select previous window
# bind -r C-l next-window     # select next window
# bind Tab last-window        # move to last active window

# toggle mouse; TODO: What is this
bind m run "cut -c3- '#{TMUX_CONF}' | sh -s _toggle_mouse"


# -- facebook pathpicker -------------------------------------------------------
# TODO: What is this
bind F run "cut -c3- '#{TMUX_CONF}' | sh -s _fpp '#{pane_id}' '#{pane_current_path}'"


# -- copy mode -----------------------------------------------------------------

bind Enter copy-mode # enter copy mode

bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi C-v send -X rectangle-toggle
bind -T copy-mode-vi y send -X copy-selection-and-cancel
bind -T copy-mode-vi Escape send -X cancel
bind -T copy-mode-vi H send -X start-of-line
bind -T copy-mode-vi L send -X end-of-line

# copy to X11 clipboard
if -b 'command -v xsel > /dev/null 2>&1' 'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - | xsel -i -b"'
if -b '! command -v xsel > /dev/null 2>&1 && command -v xclip > /dev/null 2>&1' 'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - | xclip -i -selection clipboard >/dev/null 2>&1"'
# copy to Wayland clipboard
if -b '[ "$XDG_SESSION_TYPE" = "wayland" ] && command -v wl-copy > /dev/null 2>&1' 'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - | wl-copy"'
# copy to macOS clipboard
if -b 'command -v pbcopy > /dev/null 2>&1' 'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - | pbcopy"'
# copy to Windows clipboard
if -b 'command -v clip.exe > /dev/null 2>&1' 'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - | clip.exe"'
if -b '[ -c /dev/clipboard ]' 'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - > /dev/clipboard"'


# -- buffers -------------------------------------------------------------------

# bind b list-buffers     # list paste buffers
# bind p paste-buffer -p  # paste from the top paste buffer
# bind P choose-buffer    # choose which buffer to paste from




# -- tpm -----------------------------------------------------------------------

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-cpu'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
# set -g @continuum-restore 'on'
set -g @plugin 'christoomey/vim-tmux-navigator'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @yank_selection 'clipboard'
set -g @yank_selection_mouse 'clipboard'
# set -s copy-command 'xsel -i'
# set -s set-clipboard off

set -g @plugin 'omerxx/tmux-sessionx'
unbind o
set -g @sessionx-bind 'o'   # man, this is not working. I can run it by calling the sessionx.sh script directly but not from the shortcut.
# set -g @sessionx-x-path '~/dotfiles/'
set -g @sessionx-zoxide-mode 'on'

set -g @plugin 'omerxx/tmux-floax'
set -g @floax-bind 'm'
set -g @floax-bind-menu 'M'
# make the @floax-bind key the backslash; backslash is the escape character in tmux config so it needs to be escaped
# set -g @floax-bind '\\'
# set -g @floax-bind-menu '|'
set -g @floax-border-color 'magenta'
set -g @floax-text-color 'blue'

# Themes
set -g @plugin 'dreamsofcode-io/catppuccin-tmux'
set -g @catppuccin_flavour 'mocha'
# set -g @plugin 'fabioluciano/tmux-tokyo-night'
# set -g @theme_variation 'storm'
# set -g @plugin 'jimeh/tmux-themepack'
# set -g @themepack 'powerline/double/orange'
# set -g @plugin 'nordtheme/tmux'
# set -g @plugin 'fabioluciano/tmux-tokyo-night'

# Put all TPM stuff above this
run '~/.config/tmux/plugins/tpm/tpm'
